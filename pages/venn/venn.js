// Generated by CoffeeScript 2.2.1
(function() {
  var ANGLE_OFFSET, CENTER_OFFSET, HEIGHT, OFF_COLOR, ON_COLOR, SET_RADIUS, STROKE_COLOR, STROKE_WIDTH, TEXT_ATTR, TEXT_OFFSET, TEXT_UP_OFFSET, WIDTH, centerX, centerY, cloneShape, drawSets, moveRelative, recieveMsg, setGroup;

  WIDTH = 800;

  HEIGHT = 700;

  STROKE_COLOR = "black";

  OFF_COLOR = "white";

  ON_COLOR = "#e23131";

  STROKE_WIDTH = 2;

  SET_RADIUS = 200;

  CENTER_OFFSET = 120; //distance from center of stage to center of circles

  TEXT_OFFSET = 200; //same as CENTER_OFFSET, but for text

  TEXT_UP_OFFSET = 10;

  ANGLE_OFFSET = Math.PI;

  TEXT_ATTR = {
    fontFamily: 'Arial, sans-serif',
    fontSize: '35',
    textFillColor: 'black'
  };

  centerX = Math.floor(WIDTH / 2);

  centerY = Math.floor(HEIGHT / 2);

  setGroup = new Group(); //drawn sets

  
  //Clone shape as well as position (x, y coordinates)
  cloneShape = function(shape) {
    var newShape;
    newShape = shape.clone();
    newShape.attr({
      "x": shape.attr("x"),
      "y": shape.attr("y"),
      "clip": shape.attr("clip")
    });
    return newShape;
  };

  //set x and y of shape to be the relative coordinates to relativeTo
  moveRelative = function(shape, relativeTo) {
    return shape.attr({
      "x": shape.attr("x") - relativeTo.attr("x"),
      "y": shape.attr("y") - relativeTo.attr("y")
    });
  };

  //Creates visual representations of sets and adds these to setGroup
  //setC - amount of sets to create venn-diagram for
  //toggled - which subsets that are included, starting with universe,
  //followed by smaller and smaller intersection ex, 2 sets: U, A, B, AB
  //labels - Names of the sets

  //EXAMPLES OF DRAWINGS
  //drawSets(3, [true, false, false, false, true, true, true, false], ["A", "B", "C"])
  //drawSets(2, [true, false, true, false,], ["A", "B"])
  //drawSets(1, [true, false], ["A"])
  drawSets = function(setC, toggled, labels) {
    var angle, angles, cSet, clipSet, i, i1, i2, j, k, l, label, len, len1, len2, len3, len4, m, n, newSet, newText, o, p, ref, ref1, ref2, set, setCenters, sets, x, y;
    setGroup.clear();
    //Paint background (do first if no sets)
    stage.setBackgroundColor(toggled[0] ? ON_COLOR : OFF_COLOR);
    if (setC === 0) {
      return;
    }
    angles = [];
    for (i = j = 0, ref = setC - 1; undefined !== 0 && (0 <= ref ? 0 <= j && j <= ref : 0 >= j && j >= ref); i = 0 <= ref ? ++j : --j) {
      angles.push(((2 * Math.PI / setC) * i) + ANGLE_OFFSET);
    }
    setCenters = [];
    for (k = 0, len = angles.length; k < len; k++) {
      angle = angles[k];
      setCenters.push([centerX + (Math.cos(angle) * CENTER_OFFSET), centerY + (Math.sin(angle) * CENTER_OFFSET)]);
    }
    sets = [];
//Create full circles
    for (l = 0, len1 = setCenters.length; l < len1; l++) {
      [x, y] = setCenters[l];
      newSet = new Circle(x, y, SET_RADIUS);
      sets.push(newSet);
    }
    //Create smaller sets
    if (setC === 2) {
      newSet = cloneShape(sets[1]);
      clipSet = cloneShape(sets[0]);
      moveRelative(clipSet, newSet);
      newSet.attr('clip', clipSet);
      sets.push(newSet);
    } else if (setC === 3) {
      ref1 = [[0, 1], [0, 2], [1, 2]];
      //Create two intersecting sets
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        [i1, i2] = ref1[m];
        newSet = cloneShape(sets[i1]);
        clipSet = cloneShape(sets[i2]);
        moveRelative(clipSet, newSet);
        newSet.attr('clip', clipSet);
        sets.push(newSet);
      }
      //Create center set
      cSet = cloneShape(sets[sets.length - 2]);
      clipSet = cloneShape(sets[sets.length - 1]);
      moveRelative(clipSet, cSet);
      cSet.attr("clip", clipSet);
      sets.push(cSet);
    }
//Paint sets
    for (i = n = 0, len3 = sets.length; n < len3; i = ++n) {
      set = sets[i];
      set.fill(toggled[1 + i] ? ON_COLOR : OFF_COLOR);
      set.addTo(setGroup);
    }
//Paint outlines
    for (i = o = 0, ref2 = setC - 1; undefined !== 0 && (0 <= ref2 ? 0 <= o && o <= ref2 : 0 >= o && o >= ref2); i = 0 <= ref2 ? ++o : --o) {
      cloneShape(sets[i]).stroke(STROKE_COLOR, STROKE_WIDTH).addTo(setGroup);
    }
//Paint text
    for (i = p = 0, len4 = labels.length; p < len4; i = ++p) {
      label = labels[i];
      newText = new Text(label).attr(TEXT_ATTR);
      angle = angles[i];
      newText.attr({
        x: centerX + (Math.cos(angle) * TEXT_OFFSET),
        y: (centerY + (Math.sin(angle) * TEXT_OFFSET)) - TEXT_UP_OFFSET
      });
      newText.addTo(setGroup);
    }
    return setGroup.addTo(stage);
  };

  //recieve mesages and paint sets
  recieveMsg = function(message) {
    stage.clear();
    return drawSets(message.setC, message.toggled, message.labels);
  };

  stage.on("message:draw", recieveMsg);

}).call(this);
